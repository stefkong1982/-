--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
 
--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ

CREATE TABLE язык (
    id SERIAL PRIMARY KEY, -- Уникальный идентификатор, присваивается автоматически
    название VARCHAR(100) NOT NULL UNIQUE -- Название языка, не может быть NULL и не может дублироваться
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ

INSERT INTO язык (название) VALUES
    ('Английский'),
    ('Французский'),
    ('Немецкий'),
    ('Испанский'),
    ('Итальянский');

--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ

CREATE TABLE народность (
    id SERIAL PRIMARY KEY, -- Уникальный идентификатор, присваивается автоматически
    название VARCHAR(100) NOT NULL UNIQUE -- Название народности, не может быть NULL и не может дублироваться
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ

INSERT INTO народность (название) VALUES
    ('Американцы'),
    ('Французы'),
    ('Немцы'),
    ('Испанцы'),
    ('Итальянцы');

--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ

CREATE TABLE страна (
    id SERIAL PRIMARY KEY, -- Уникальный идентификатор, присваивается автоматически
    название VARCHAR(100) NOT NULL UNIQUE -- Название страны, не может быть NULL и не может дублироваться
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ

INSERT INTO страна (название) VALUES
    ('США'),
    ('Франция'),
    ('Германия'),
    ('Испания'),
    ('Италия');

--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ

-- Создаем таблицу-связь "язык-народность"
CREATE TABLE язык_народность (
    язык_id INTEGER REFERENCES язык(id), -- Столбец-внешний ключ, связанный с таблицей языков
    народность_id INTEGER REFERENCES народность(id), -- Столбец-внешний ключ, связанный с таблицей народностей
    PRIMARY KEY (язык_id, народность_id) -- Первичный ключ, состоящий из двух внешних ключей, предотвращает дублирование записей
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

-- Добавление 5 связей "язык-народность"
INSERT INTO язык_народность (язык_id, народность_id) VALUES
    (1, 1),
    (1, 2),
    (2, 2),
    (3, 3),
    (4, 4);

--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ

-- Создаем таблицу-связь "народность-страна"
CREATE TABLE народность_страна (
    народность_id INTEGER REFERENCES народность(id), -- Столбец-внешний ключ, связанный с таблицей народностей
    страна_id INTEGER REFERENCES страна(id), -- Столбец-внешний ключ, связанный с таблицей стран
    PRIMARY KEY (народность_id, страна_id) -- Первичный ключ, состоящий из двух внешних ключей, предотвращает дублирование записей
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

-- Добавление 5 связей "народность-страна"
INSERT INTO народность_страна (народность_id, страна_id) VALUES
    (1, 1),
    (1, 2),
    (2, 2),
    (3, 3),
    (4, 4);


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============


--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.

CREATE TABLE film_new (
    film_name VARCHAR(255) NOT NULL, -- Название фильма, не может быть NULL
    film_year INTEGER CHECK (film_year > 0), -- Год выпуска фильма, должен быть больше нуля
    film_rental_rate NUMERIC(4,2) DEFAULT 0.99, -- Стоимость аренды фильма, по умолчанию 0.99
    film_duration INTEGER NOT NULL CHECK (film_duration > 0) -- Длительность фильма, не может быть NULL и должна быть больше нуля
);

--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]

INSERT INTO film_new (film_name, film_year, film_rental_rate, film_duration)
VALUES
    ('The Shawshank Redemption', 1994, 2.99, 142),
    ('The Green Mile', 1999, 0.99, 189),
    ('Back to the Future', 1985, 1.99, 116),
    ('Forrest Gump', 1994, 2.99, 142),
    ('Schindler’s List', 1993, 3.99, 195);

   CREATE TABLE film_new_2 (
    film_name VARCHAR(255) NOT NULL, -- Название фильма, не может быть NULL
    film_year INTEGER CHECK (film_year > 0), -- Год выпуска фильма, должен быть больше нуля
    film_rental_rate NUMERIC(4,2) DEFAULT 0.99, -- Стоимость аренды фильма, по умолчанию 0.99
    film_duration INTEGER NOT NULL CHECK (film_duration > 0) -- Длительность фильма, не может быть NULL и должна быть больше нуля
);
   
  
I-- Вставляем данные в таблицу с использованием функции unnest
INSERT INTO film_new (film_name, film_year, film_rental_rate, film_duration)
SELECT
  unnest(ARRAY['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']), -- Разложение массива film_name на строки
  unnest(ARRAY[1994, 1999, 1985, 1994, 1993]), -- Разложение массива film_year на строки
  unnest(ARRAY[2.99, 0.99, 1.99, 2.99, 3.99]), -- Разложение массива film_rental_rate на строки
  unnest(ARRAY[142, 189, 116, 142, 195]); -- Разложение массива film_duration на строки


--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41

UPDATE film_new SET film_rental_rate = film_rental_rate + 1.41;

--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new

DELETE FROM film_new WHERE film_name = 'Back to the Future';

--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме

INSERT INTO film_new (film_name, film_year, film_rental_rate, film_duration)
VALUES
    ('The Irishman', 2019, 4.99, 209);

--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых

SELECT *,
    ROUND(film_duration::NUMERIC/60, 1) AS duration_hours -- Длительность фильма в часах, округленная до десятых
FROM film_new;

--ЗАДАНИЕ №7 
--Удалите таблицу film_new

DROP TABLE film_new;
