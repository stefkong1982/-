--=============== МОДУЛЬ 3. ОСНОВЫ SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Выведите для каждого покупателя его адрес проживания, 
--город и страну проживания.

SELECT 
    c.first_name, -- выбираем имя покупателя 
    c.last_name, -- фамилию покупателя 
    a.address, -- адрес проживания покупателя
    ci.city, -- город проживания покупателя
    co.country -- страну проживания покупателя
FROM 
    customer c -- выбираем данные из таблицы покупателей
JOIN 
    address a ON c.address_id = a.address_id -- соединяем таблицы покупателей и адресов через соответствующий ключ
JOIN 
    city ci ON a.city_id = ci.city_id -- соединяем таблицы адресов и городов через соответствующий ключ
JOIN 
    country co ON ci.country_id = co.country_id -- соединяем таблицы городов и стран через соответствующий ключ

--ЗАДАНИЕ №2
--С помощью SQL-запроса посчитайте для каждого магазина количество его покупателей.

SELECT 
    store.store_id, -- выбираем идентификатор магазина
    COUNT(customer.customer_id) AS "Количество покупателей" -- вычисляем количество покупателей для каждого магазина и задаем понятное название столбца
FROM 
    store -- выбираем данные из таблицы магазинов
JOIN 
    customer ON customer.store_id = store.store_id -- соединяем таблицы магазинов и покупателей через соответствующий ключ
GROUP BY 
    store.store_id; -- группируем результаты по идентификатору магазина

--Доработайте запрос и выведите только те магазины, 
--у которых количество покупателей больше 300-от.
--Для решения используйте фильтрацию по сгруппированным строкам 
--с использованием функции агрегации.

SELECT 
    store.store_id, -- выбираем идентификатор магазина
    COUNT(customer.customer_id) AS "Количество покупателей" -- вычисляем количество покупателей для каждого магазина и задаем понятное название столбца
FROM 
    store -- выбираем данные из таблицы магазинов
JOIN 
    customer ON customer.store_id = store.store_id -- соединяем таблицы магазинов и покупателей через соответствующий ключ
GROUP BY 
    store.store_id -- группируем результаты по идентификатору магазина
HAVING 
    COUNT(customer.customer_id) > 300; -- фильтруем магазины, у которых количество покупателей меньше 300

-- Доработайте запрос, добавив в него информацию о городе магазина, 
--а также фамилию и имя продавца, который работает в этом магазине.

SELECT 
    s.store_id, -- выбираем идентификатор магазина
    c.city , -- выбираем название города
    st.first_name, -- выбираем имя менеджера
    st.last_name, -- выбираем фамилию менеджера
    COUNT(customer.customer_id) AS "Количество покупателей" -- выбираем количество покупателей, которых обслуживает каждый магазин
FROM    
    store s -- выбираем таблицу с информацией о магазинах
JOIN customer ON customer.store_id = s.store_id -- подключаем таблицу покупателей по ID магазина
JOIN staff st ON s.manager_staff_id = st.staff_id -- подключаем таблицы сотрудников, чтобы узнать, кто является менеджером магазина
JOIN address a ON s.address_id = a.address_id -- подключаем таблицу адресов
JOIN city c ON a.city_id = c.city_id -- подключаем таблицу городов
GROUP BY 
    s.store_id, c.city, st.first_name, st.last_name -- группируем результаты по идентификатору магазина, названию города, имени и фамилии менеджера
HAVING 
    COUNT(customer.customer_id) > 300; -- выбираем только те записи, у которых количество покупателей больше 300


--ЗАДАНИЕ №3
--Выведите ТОП-5 покупателей, 
--которые взяли в аренду за всё время наибольшее количество фильмов

SELECT 
    c.first_name, -- выбираем имя покупателя
    c.last_name, -- выбираем фамилию покупателя
    COUNT(*) AS "Количество фильмов" -- выбираем количество взятых покупателем фильмов
FROM    
    customer c
JOIN rental r ON r.customer_id = c.customer_id
GROUP BY 
    c.first_name, c.last_name -- группируем результаты по имени и фамилии покупателя
ORDER BY 
    COUNT(*) DESC -- сортируем результаты по убыванию количества взятых фильмов
LIMIT 
    5; -- выводим только ТОП-5 результатов

--ЗАДАНИЕ №4
--Посчитайте для каждого покупателя 4 аналитических показателя:
--  1. количество фильмов, которые он взял в аренду
--  2. общую стоимость платежей за аренду всех фильмов (значение округлите до целого числа)
--  3. минимальное значение платежа за аренду фильма
--  4. максимальное значение платежа за аренду фильма

SELECT 
    c.first_name, -- выбираем имя покупателя
    c.last_name, -- выбираем фамилию покупателя
    COUNT(r.rental_id) AS "Количество фильмов", -- выбираем количество взятых покупателем фильмов
    ROUND(SUM(p.amount), 0) AS "Общая стоимость аренды", -- выбираем общую стоимость аренды всех фильмов
    MIN(p.amount) AS "Минимальная стоимость аренды", -- выбираем минимальную стоимость аренды фильма
    MAX(p.amount) AS "Максимальная стоимость аренды" -- выбираем максимальную стоимость аренды фильма
FROM    
    customer c
JOIN rental r ON r.customer_id = c.customer_id
JOIN payment p ON p.rental_id = r.rental_id
GROUP BY 
    c.first_name, c.last_name -- группируем результаты по имени и фамилии покупателя
    
--ЗАДАНИЕ №5
--Используя данные из таблицы городов, составьте все возможные пары городов так, чтобы 
--в результате не было пар с одинаковыми названиями городов. Решение должно быть через Декартово произведение.
 
SELECT DISTINCT 
  c1.city AS "Город 1", -- выбираем город из таблицы city и присваиваем ему псевдоним "Город 1"
  c2.city AS "Город 2"  -- выбираем город из таблицы city и присваиваем ему псевдоним "Город 2"
FROM 
  city c1 -- устанавливаем псевдоним "c1" на таблицу "city"
JOIN 
  city c2 -- устанавливаем псевдоним "c2" на таблицу "city"
ON 
  c1.city < c2.city -- устанавливаем условие соединения по именам городов
ORDER BY 
  "Город 1", -- сортируем результаты по имени "Город 1" в алфавитном порядке
  "Город 2"; -- сортируем результаты по имени "Город 2" в алфавитном порядке

--ЗАДАНИЕ №6
--Используя данные из таблицы rental о дате выдачи фильма в аренду (поле rental_date) и 
--дате возврата (поле return_date), вычислите для каждого покупателя среднее количество 
--дней, за которые он возвращает фильмы. В результате должны быть дробные значения, а не интервал.
 
SELECT
  customer.first_name, -- выбираем имя покупателя
  customer.last_name, -- выбираем фамилию покупателя
  ROUND(AVG(EXTRACT(DAY FROM rental.return_date - rental.rental_date))) AS Cреднее_количество_дней -- вычисляем среднее количество дней для каждого покупателя
FROM
  customer
  JOIN rental ON customer.customer_id = rental.customer_id -- выбираем таблицы, связанные друг с другом
GROUP BY 
  customer.customer_id; -- сгруппируем результаты по customer_id


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Посчитайте для каждого фильма сколько раз его брали в аренду и значение общей стоимости аренды фильма за всё время.

SELECT 
    film.title, -- Выбираем название фильма
    COUNT(rental.rental_id), -- Количество прокатов
    SUM(payment.amount) -- Сумма оплат за прокат
FROM 
    film -- Выбираем таблицу film
JOIN 
    inventory ON film.film_id = inventory.film_id -- Присоединяем таблицу inventory
JOIN 
    rental ON inventory.inventory_id = rental.inventory_id -- Присоединяем таблицу rental
JOIN 
    payment ON rental.rental_id = payment.rental_id -- Присоединяем таблицу payment
GROUP BY 
    film.film_id, film.title -- Группируем данные по film_id и названию фильма
ORDER BY 
    SUM(payment.amount) DESC -- Сортируем данные в порядке убывания суммы оплат

--ЗАДАНИЕ №2
--Доработайте запрос из предыдущего задания и выведите с помощью него фильмы, которые отсутствуют на dvd дисках.

  SELECT 
    film.title, -- Выбираем название фильма
    COUNT(rental.rental_id), -- Количество прокатов
    SUM(payment.amount), -- Сумма оплат за прокат
    inventory.film_id -- Выбираем идентификатор фильма из инвентаря
FROM 
    film -- Выбираем таблицу film
LEFT JOIN 
    inventory ON film.film_id = inventory.film_id -- Присоединяем таблицу inventory
LEFT JOIN 
    rental ON inventory.inventory_id = rental.inventory_id -- Присоединяем таблицу rental
LEFT JOIN 
    payment ON rental.rental_id = payment.rental_id -- Присоединяем таблицу payment
WHERE 
    inventory.film_id IS NULL -- Удаляем все записи, которые имеют соответствующие записи в inventory, чтобы остались только те записи, которых нет в inventory
GROUP BY 
    film.film_id, film.title, inventory.film_id -- Группируем данные по film_id и названию фильма, а также по идентификатору фильма из инвентаря
ORDER BY 
    SUM(payment.amount) DESC -- Сортируем данные в порядке убывания суммы оплат

--ЗАДАНИЕ №3
--Посчитайте количество продаж, выполненных каждым продавцом. Добавьте вычисляемую колонку "Премия".
--Если количество продаж превышает 7300, то значение в колонке будет "Да", иначе должно быть значение "Нет".

SELECT 
    staff.first_name, staff.last_name, -- Вимя продавца из столбцов first_name и last_name
    COUNT(payment.payment_id), -- Вычисляем количество продаж
CASE -- Вычисляем премию и формируем колонку "Премия"
        WHEN COUNT(payment.payment_id) > 7300 THEN 'Да'
        ELSE 'Нет'
    END AS "Премия"
FROM 
    staff -- Выбираем таблицу staff
JOIN 
    store ON staff.store_id = store.store_id -- Присоединяем таблицу store
LEFT JOIN 
    payment ON staff.staff_id = payment.staff_id -- Присоединяем таблицу payment
GROUP BY 
    staff.staff_id -- Группируем по идентификатору продавца
ORDER BY 
    COUNT(payment.payment_id) DESC -- Сортируем по количеству продаж в порядке убывания





